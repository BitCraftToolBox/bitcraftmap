biomes_array = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,5,5,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,261,5,5,5,1,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,5,5,5,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,5,5,5,5,1,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,261,5,5,5,5,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,1281,261,261,261,261,261,261,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import RegularPolygon
from matplotlib.colors import ListedColormap

# === INPUT ===
# Replace with your own 1024-length biomes array
biomes = np.array(biomes_array)

# === CONFIG ===
grid_size = int(np.sqrt(len(biomes_array)))  # Should be 32
assert grid_size * grid_size == len(biomes_array)

# Colors: biome 0â€“15 + red for others
colors = [
    "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
    "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
    "#aec7e8", "#ffbb78", "#98df8a", "#ff9896", "#c5b0d5",
    "#c49c94", "#ff0000"
]
cmap = ListedColormap(colors)

# === DRAWING ===
fig, ax = plt.subplots(figsize=(10, 10))
ax.set_aspect('equal')
ax.axis('off')

# Hexagon parameters
hex_radius = 1
hex_height = np.sqrt(3) * hex_radius
dx = 1.5 * hex_radius
dy = hex_height

# Plot each biome cell as a colored hexagon
for idx, biome in enumerate(biomes_array):
    row = idx // grid_size
    col = idx % grid_size

    # Stagger every other row (odd-q layout)
    x = col * dx
    y = row * dy * 0.5
    if col % 2 == 1:
        y += dy * 0.5

    biome_index = biome if 0 <= biome <= 15 else 16
    color = cmap(biome_index)

    hex = RegularPolygon(
        (x, y), numVertices=6, radius=hex_radius,
        orientation=np.radians(30), facecolor=color, edgecolor='black'
    )
    ax.add_patch(hex)

# Optional: adjust view limits
ax.set_xlim(-1, dx * (grid_size + 0.5))
ax.set_ylim(-1, dy * (grid_size / 2 + 0.5))

plt.tight_layout()
plt.savefig("hex_biome_grid.png", dpi=300)
plt.show()